{"version":3,"file":"static/webpack/static/development/pages/doctor.js.9ef511dd84d8846cadc6.hot-update.js","sources":["webpack:///./pages/doctor/index.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../components/patientLayout\";\nimport web3 from \"../../ethereum/web3\";\nimport Factory from \"../../build/contracts/ReceptionsitFactory.json\";\nimport Doctor from \"../../build/contracts/Doctor.json\";\nimport truffleContract from \"truffle-contract\";\nimport {\n  Card,\n  Button,\n  Tab,\n  Form,\n  Input,\n  Dropdown,\n  Table,\n  Message\n} from \"semantic-ui-react\";\nimport ipfs from \"../ipfs\";\nclass doctor extends Component {\n  state = {\n    appointmentIdResult: \"\",\n    appointmentIdSearch: \"\",\n    patientIdResult: \"\",\n    doctorIdresult: \"\",\n    dateResult: \"\",\n    chepComplaintResult: \"\",\n    appointmentIdForFile: \"\",\n    isCheckTrue: false,\n    buffer: \"\"\n  };\n\n  static async getInitialProps() {\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts[0]);\n    const factory = truffleContract(Factory);\n    factory.setProvider(web3.currentProvider);\n    const instanceFactory = await factory.deployed();\n    const doctor = truffleContract(Doctor);\n    doctor.setProvider(web3.currentProvider);\n\n    const doctorAddress = await instanceFactory.accountToAddressDoctor.call(\n      accounts[0]\n    );\n    if (doctorAddress == 0x0000000000000000000000000000000000000000) {\n      alert(\"Sorry check your account or contact with authorized person\");\n\n      return { doctorAddress: null };\n    } else {\n      const instanceDoctor = await doctor.at(doctorAddress);\n      const doctorId = await instanceDoctor.doctorId.call();\n      const summary = await instanceDoctor.getSummary.call(doctorId);\n\n      return {\n        doctorAddress: doctorAddress,\n        doctor: instanceDoctor,\n        doctorId: summary[0].toNumber(),\n        doctorName: summary[1],\n        doctorGender: summary[2],\n        qualification: summary[3],\n        account: summary[4],\n        accounts: accounts\n      };\n    }\n  }\n\n  onAppointmentIdForFile = event => {\n    this.setState({ appointmentIdForFile: event.target.value });\n    console.log(this.state.appointmentIdForFile);\n  };\n  onAppointmentIdSearch = event => {\n    this.setState({ appointmentIdSearch: event.target.value });\n  };\n\n  onSearchAppointment = async event => {\n    event.preventDefault();\n    const doctor = this.props.doctor;\n    console.log(doctor);\n\n    const appointmentResult = await doctor.appointments.call(\n      parseInt(this.state.appointmentIdSearch)\n    );\n    console.log(appointmentResult);\n    this.setState({\n      appointmentIdResult: appointmentResult[0].toNumber(),\n      patientIdResult: appointmentResult[1].toNumber(),\n      doctorIdresult: appointmentResult[2].toNumber(),\n      dateResult: appointmentResult[3],\n      chepComplaintResult: appointmentResult[4]\n    });\n    this.onSearch();\n  };\n  onSearch = () => {\n    if (this.state.appointmentIdResult) {\n      return (\n        <Table singleLine>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Appointement Id</Table.HeaderCell>\n              <Table.HeaderCell>Patient Id</Table.HeaderCell>\n              <Table.HeaderCell>Doctor Id</Table.HeaderCell>\n              <Table.HeaderCell>Date</Table.HeaderCell>\n              <Table.HeaderCell>Chief Complaint</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>{this.state.appointmentIdResult}</Table.Cell>\n              <Table.Cell>{this.state.patientIdResult}</Table.Cell>\n              <Table.Cell>{this.state.doctorIdresult}</Table.Cell>\n              <Table.Cell>{this.state.dateResult}</Table.Cell>\n              <Table.Cell>{this.state.chepComplaintResult}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      );\n    } else {\n      return <h1>No Record Found</h1>;\n    }\n  };\n\n  onAddPrescriptionSearch = async () => {\n    const { appointmentIdForFile } = this.state;\n    const doctor = this.props.doctor;\n    const appointment = await doctor.appointments.call(appointmentIdForFile);\n    const isCheckTrue = appointment[6];\n    if (appointment[0].toNumber() == 0) {\n      alert(\"please provide right Appointment Id\");\n    } else {\n      this.setState({\n        appointmentIdForFile: appointment[0].toNumber(),\n        isCheckTrue: isCheckTrue\n      });\n      console.log(this.state.isCheckTrue, this.state.appointmentIdForFile);\n      this.renderFile();\n    }\n  };\n\n  onSubmit = async event => {\n    try {\n      console.log(this.state.appointmentIdForFile);\n      const doctor = this.props.doctor;\n      const appointment = await doctor.appointments.call(\n        this.state.appointmentIdForFile\n      );\n      const isCheckTrue = appointment[6];\n      console.log(isCheckTrue);\n      if (isCheckTrue || this.state.appointmentIdForFile == 0) {\n        return alert(\"Sorry provide valid appointment Id\");\n      } else {\n        ipfs.files.add(this.state.buffer, async (error, result) => {\n          if (error) {\n            console.error(error);\n            return;\n          }\n          // const ethAddress = instance.address;\n          // this.setState({ ethAddress });\n\n          const prescription = await doctor.addPrescription(\n            this.state.appointmentIdForFile,\n            result[0].hash,\n            { from: this.props.accounts[0] }\n          );\n        });\n        const appointment = await doctor.appointments.call(\n          this.state.appointmentIdForFile\n        );\n        console.log(appointment);\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  captureFile = event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) });\n      console.log(\"buffer:\", this.state.buffer);\n    };\n  };\n\n  renderFile = () => {\n    console.log(\"render file:\", this.state.isCheckTrue);\n    // console.log(\"address\", this.props.);\n    if (!this.state.isCheckTrue) {\n      return (\n        <div>\n          <h1>Please Add File</h1>\n          <Form onSubmit={this.onSubmit}>\n            <Form.Group widths=\"equal\">\n              <Input\n                type=\"file\"\n                onChange={this.captureFile}\n                style={{\n                  width: 800,\n                  height: 40,\n                  opacity: 100\n                }}\n              />\n              <Button\n                primary\n                icon=\"upload\"\n                label={{\n                  basic: true,\n                  content: \"upload file\"\n                }}\n                labelPosition=\"right\"\n              />\n            </Form.Group>\n          </Form>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h1>already Completed</h1>\n        </div>\n      );\n    }\n  };\n\n  renderTabs() {\n    const { Header, Row, HeaderCell, Body } = Table;\n\n    const panes = [\n      {\n        menuItem: \"Add File of Visit\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Add File of Appointment</h1>\n            <h1>Search Appointment</h1>\n            <Form onSubmit={this.onAddPrescriptionSearch}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentIdForFile}\n                    onChange={this.onAppointmentIdForFile}\n                  />\n                </Form.Field>\n\n                <Button primary> Search Appointment </Button>\n              </Form.Group>\n            </Form>\n\n            {this.renderFile(\n              this.state.appointmentIdForFile,\n              this.state.isCheckTrue\n            )}\n          </Tab.Pane>\n        )\n      },\n      {\n        menuItem: \"Search Appointment\",\n        render: () => (\n          <Tab.Pane attached={false}>\n            <h1>Search Appointment</h1>\n            <Form onSubmit={this.onSearchAppointment}>\n              <Form.Group widths=\"equal\">\n                <Form.Field>\n                  <label>Appointment Id</label>\n                  <Input\n                    value={this.state.appointmentIdSearch}\n                    onChange={this.onAppointmentIdSearch}\n                  />\n                </Form.Field>\n\n                <Button primary> Search Appointment </Button>\n              </Form.Group>\n            </Form>\n            {this.onSearch()}\n          </Tab.Pane>\n        )\n      }\n    ];\n    return <Tab menu={{ attached: false }} panes={panes} />;\n  }\n\n  render() {\n    if (this.props.doctorAddress === null) {\n      return (\n        <Layout>\n          <div style={{ color: \"red\" }}>\n            <h1>\n              You are not Registered as Doctor or you have selected wrong\n              account in metamask\n            </h1>\n          </div>\n        </Layout>\n      );\n    } else {\n      return (\n        <Layout>\n          <div>\n            <div\n              style={{\n                backgroundColor: \"#4267b2\",\n                color: \"white\",\n                marginTop: 10,\n                borderRadius: 4,\n                padding: 10,\n                paddingLeft: 50,\n                margin: 10,\n                fontFamily: \"Times New Roman, Times, serif\",\n                fontSize: 20\n              }}\n            >\n              <div>Doctor Id: {this.props.doctorId}</div>\n              <div> Doctor Name : {this.props.doctorName}</div>\n              <div>Gender: {this.props.doctorGender}</div>\n              <div>Qualification: {this.props.qualification}</div>\n              <div> Account: {this.props.account}</div>\n            </div>\n            {this.renderTabs()}\n          </div>\n        </Layout>\n      );\n    }\n  }\n}\nexport default doctor;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AA6CA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAiBA;AACA;AACA;AACA;AAAA;AAqBA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAgBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AAGA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AAWA;AAAA;AACA;AAZA;AAQA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAZA;AAAA;AACA;AADA;AA0BA;AAGA;AACA;AA9BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAgCA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAPA;AAaA;AACA;AAKA;AACA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAMA;AAAA;AAdA;AAFA;AA4BA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAFA;AAMA;AAAA;AAbA;AAFA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAQA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAuBA;AACA;;;;;;;;;;;;;AAjSA;AACA;;AADA;AACA;AACA;AACA;;AACA;AACA;;AADA;AACA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;;;;;AACA;AAEA;AAAA;AAAA;AACA;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;;;;;;;;;;;;;;;;AAnCA;AACA;AAgTA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}